!function(){"use strict";const e="FETCH_DATA",t="temperature",o="precipitation";const n=e=>e;function a(e,t=n){return function(...o){return{type:e,payload:t(...o)}}}const r=a("ERROR",(e,t="Something bad happened in worker")=>({error:e,message:t})),s=a("RECIEVE_DATA",(e,t,o)=>({route:e,data:o,code:t}));self.dbPromise=async function(){return new Promise((e,n)=>{const a=indexedDB.open("weather_app",1);a.onupgradeneeded=function(e){const n=e.target.result;n.createObjectStore(t,{keyPath:"t"}),n.createObjectStore(o,{keyPath:"t"})},a.onsuccess=function(t){e(t.target.result)},a.onerror=function(e){n(e)}})}(),console.log("Worker installed"),self.onmessage=function(n){try{const{data:a}=n;switch(a.type){case e:!async function({route:e,params:n}){switch(console.log(`should request on route: "${e}" with params`,n),e){case t:case o:try{const t=await self.dbPromise;let o=t.transaction(e,"readonly").objectStore(e);const n=await(a=o.count(),new Promise((e,t)=>{a.onsuccess=(()=>e(a.result)),a.onerror=t}));if(!n){const n=await fetch(`./data/${e}.json`),a=await n.json();o=t.transaction(e,"readwrite").objectStore(e),a.forEach(e=>{o.add(e)})}self.postMessage(s(e,200))}catch(e){console.error(e)}}var a}(a.payload);break;default:throw"Unknown data type"}}catch(e){self.postMessage(r(e))}}}();
