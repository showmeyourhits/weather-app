!function(){"use strict";const t="FETCH_DATA",e="temperature",n="precipitation";const o=t=>t;function r(t,e=o){return function(...n){return{type:t,payload:e(...n)}}}const a=r("ERROR",(t,e="Something bad happened in worker")=>({error:t,message:e})),s=r("RECIEVE_DATA",(t,e,n)=>({route:t,data:n,code:e}));function c(t){return new Promise((e,n)=>{t.onsuccess=(()=>e(t.result)),t.onerror=n})}const u=12;const i=(t,e=2)=>`${Math.round(parseFloat(t)*10**e)/10**e}`;self.dbPromise=async function(){return new Promise((t,o)=>{const r=indexedDB.open("weather_app",1);r.onupgradeneeded=function(t){const o=t.target.result;o.createObjectStore(e,{keyPath:"t"}),o.createObjectStore(n,{keyPath:"t"})},r.onsuccess=function(e){t(e.target.result)},r.onerror=function(t){o(t)}})}(),console.log("Worker installed"),self.onmessage=function(o){try{const{data:r}=o;switch(r.type){case t:!async function({route:t,params:o}){switch(t){case e:case n:try{const e=await self.dbPromise;let n=e.transaction(t,"readonly").objectStore(t);const r=await c(n.count());if(!r){const o=await fetch(`./data/${t}.json`),r=await o.json();n=e.transaction(t,"readwrite").objectStore(t),r.forEach(t=>{n.add(t)})}n=e.transaction(t,"readonly").objectStore(t);const a=await c(n.getAll(function({start_date:t,end_date:e}){return IDBKeyRange.bound(`${t}-01-01`,`${e}-12-12`)}(o)));self.postMessage(s(t,200,function(t,e=u){const n=Math.floor(t.length/e);return t.reduce((t,o,r)=>{let a=Math.floor(r/n);return a>=e&&(a=e-1),t[a]||(t[a]=[]),t[a].push(o),t},[]).map(t=>{const e=t.length;return{v:i(t.reduce((t,e)=>e.v+t,0)/e)}})}(a)))}catch(t){console.error(t)}}}(r.payload);break;default:throw"Unknown data type"}}catch(t){self.postMessage(a(t))}}}();
